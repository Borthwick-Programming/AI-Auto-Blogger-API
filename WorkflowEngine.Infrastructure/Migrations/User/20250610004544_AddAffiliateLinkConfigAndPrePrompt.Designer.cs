// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorkflowEngine.Infrastructure.Data;

#nullable disable

namespace WorkflowEngine.Infrastructure.Migrations.User
{
    [DbContext(typeof(WorkflowEngineDbContext))]
    [Migration("20250610004544_AddAffiliateLinkConfigAndPrePrompt")]
    partial class AddAffiliateLinkConfigAndPrePrompt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.Links.AffiliateLinkInputConfig", b =>
                {
                    b.Property<Guid>("NodeInstanceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CsvPath")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("NodeInstanceId");

                    b.ToTable("AffiliateLinkInputConfigs");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.Links.AffiliateLinkInputEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NodeInstanceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PrePromptName")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NodeInstanceId");

                    b.ToTable("AffiliateLinkInputEntries");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.Links.PrePrompt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("PromptText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PrePrompts");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.NodeConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FromNodeInstanceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FromPortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ToNodeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ToNodeInstanceId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToPortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FromNodeInstanceId");

                    b.HasIndex("ToNodeId");

                    b.ToTable("NodeConnections");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.NodeDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigurationSchemaJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("InputsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("NodeType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("OutputsJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReactComponent")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NodeDefinitions");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.NodeInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigurationJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NodeTypeId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("PositionX")
                        .HasColumnType("REAL");

                    b.Property<double>("PositionY")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("NodeInstances");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.Links.AffiliateLinkInputConfig", b =>
                {
                    b.HasOne("WorkflowEngine.Infrastructure.Entities.NodeInstance", "NodeInstance")
                        .WithOne()
                        .HasForeignKey("WorkflowEngine.Infrastructure.Entities.Links.AffiliateLinkInputConfig", "NodeInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NodeInstance");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.Links.AffiliateLinkInputEntry", b =>
                {
                    b.HasOne("WorkflowEngine.Infrastructure.Entities.Links.AffiliateLinkInputConfig", "Config")
                        .WithMany("Entries")
                        .HasForeignKey("NodeInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.NodeConnection", b =>
                {
                    b.HasOne("WorkflowEngine.Infrastructure.Entities.NodeInstance", "FromNode")
                        .WithMany("OutgoingConnections")
                        .HasForeignKey("FromNodeInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorkflowEngine.Infrastructure.Entities.NodeInstance", "ToNode")
                        .WithMany("IncomingConnections")
                        .HasForeignKey("ToNodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromNode");

                    b.Navigation("ToNode");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.NodeInstance", b =>
                {
                    b.HasOne("WorkflowEngine.Infrastructure.Entities.Project", "Project")
                        .WithMany("NodeInstances")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.Project", b =>
                {
                    b.HasOne("WorkflowEngine.Infrastructure.Entities.User", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.Links.AffiliateLinkInputConfig", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.NodeInstance", b =>
                {
                    b.Navigation("IncomingConnections");

                    b.Navigation("OutgoingConnections");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.Project", b =>
                {
                    b.Navigation("NodeInstances");
                });

            modelBuilder.Entity("WorkflowEngine.Infrastructure.Entities.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
